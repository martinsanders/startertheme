ClientConfig.grid.Settings=function(t){t=t||{},Ext.applyIf(t,{url:ClientConfig.config.connectorUrl,id:"clientconfig-grid-settings",baseParams:{action:"mgr/settings/getlist"},save_action:"mgr/settings/updatefromgrid",autosave:!0,emptyText:_("clientconfig.error.noresults"),paging:!0,remoteSort:!0,fields:[{name:"id",type:"int"},{name:"key",type:"string"},{name:"label",type:"string"},{name:"xtype",type:"string"},{name:"description",type:"string"},{name:"is_required",type:"bool"},{name:"value",type:"string"},{name:"default",type:"string"},{name:"source",type:"int"},{name:"group",type:"int"},{name:"group_label",type:"string"},{name:"sortorder",type:"int"},{name:"options",type:"object"},{name:"process_options",type:"bool"}],columns:[{header:_("clientconfig.id"),dataIndex:"id",sortable:!0,width:.1},{header:_("clientconfig.key"),dataIndex:"key",editor:{xtype:"textfield"},sortable:!0,width:.3},{header:_("clientconfig.label"),dataIndex:"label",editor:{xtype:"textfield"},sortable:!0,width:.3},{header:_("clientconfig.xtype"),dataIndex:"xtype",editor:{xtype:"clientconfig-combo-fieldtypes",renderer:!0},sortable:!0,width:.15},{header:_("clientconfig.is_required"),dataIndex:"is_required",editor:{xtype:"combo-boolean",renderer:"boolean"},sortable:!0,width:.15,renderer:this.rendYesNo},{header:_("clientconfig.group"),dataIndex:"group",editor:{xtype:"clientconfig-combo-groups",renderer:!0},sortable:!0,width:.3},{header:_("clientconfig.sortorder"),dataIndex:"sortorder",editor:{xtype:"numberfield",allowDecimal:!1,allowNegative:!1},sortable:!0,width:.2}],tbar:[{text:_("clientconfig.add_setting"),handler:this.addSetting,scope:this},"->",{emptyText:_("clientconfig.filter_on_group"),xtype:"clientconfig-combo-groups",id:"clientconfig-settings-filter-group",listeners:{select:{fn:function(t,e){this.getStore().baseParams.group=e.id,this.getBottomToolbar().changePage(1)},scope:this}},width:250},"-",{text:_("clientconfig.export_settings"),handler:this.exportSettings,scope:this},"-",{text:_("clientconfig.import_settings"),handler:this.importSettings,scope:this}]}),ClientConfig.grid.Settings.superclass.constructor.call(this,t)},Ext.extend(ClientConfig.grid.Settings,MODx.grid.Grid,{addSetting:function(){var t=Ext.getCmp("clientconfig-grid-groups");if(t.store.data.items.length<1)return void MODx.msg.alert(_("clientconfig.create_groups_first"),_("clientconfig.create_groups_first.desc"),function(){t.addGroup()},t);MODx.load({xtype:"clientconfig-window-setting",listeners:{success:{fn:function(t){this.refresh()},scope:this},scope:this}}).show()},updateSetting:function(){var t=this.menu.record,e=MODx.load({xtype:"clientconfig-window-setting",record:t,listeners:{success:{fn:function(t){this.refresh()},scope:this},scope:this},isUpdate:!0});e.setValues(t),e.show()},duplicateSetting:function(){var t=this.menu.record;t.id=0;var e=MODx.load({xtype:"clientconfig-window-setting",record:t,listeners:{success:{fn:function(t){this.refresh()},scope:this},scope:this},isDuplicate:!0});e.setValues(t),e.show()},removeSetting:function(){var t=this.menu.record.id;MODx.msg.confirm({title:_("clientconfig.remove_setting"),text:_("clientconfig.remove_setting.confirm"),url:this.config.url,params:{action:"mgr/settings/remove",id:t},listeners:{success:{fn:function(t){this.refresh()},scope:this},scope:this}})},getMenu:function(t){var e=[];return e.push({text:_("clientconfig.update_setting"),handler:this.updateSetting,scope:this},{text:_("clientconfig.duplicate_setting"),handler:this.duplicateSetting,scope:this},"-",{text:_("clientconfig.remove_setting"),handler:this.removeSetting,scope:this}),e},filterOnGroup:function(){this.baseParams.group=Ext.getCmp("clientconfig-settings-filter-group").getValue(),this.getBottomToolbar().changePage(1),this.refresh()},exportSettings:function(){Ext.Msg.confirm(_("clientconfig.export_settings"),_("clientconfig.export_settings.confirm"),function(t){"yes"==t&&(window.location=ClientConfig.config.connectorUrl+"?action=mgr/settings/export&HTTP_MODAUTH="+MODx.siteId)})},importSettings:function(){MODx.load({xtype:"clientconfig-window-import",title:_("clientconfig.import_settings"),introduction:_("clientconfig.import_settings.desc"),what:_("clientconfig.settings"),baseParams:{action:"mgr/settings/import"},listeners:{success:{fn:function(t){this.refresh()},scope:this},scope:this}}).show()}}),Ext.reg("clientconfig-grid-settings",ClientConfig.grid.Settings);