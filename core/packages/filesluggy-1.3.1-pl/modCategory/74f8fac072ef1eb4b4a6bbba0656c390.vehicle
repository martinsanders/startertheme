<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Plugins' => 
    array (
      '8684334163dfc2a3cdfc453ef3bb72b8' => 
      array (
        'unique_key' => 'name',
        'preserve_keys' => false,
        'update_object' => true,
        'related_objects' => 
        array (
          'PluginEvents' => 
          array (
            'f7d8138f281ce44ac2b28d4b5876ee72' => 
            array (
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnFileManagerDirCreate","priority":0,"propertyset":0}',
              'guid' => 'e96b4e98240b7893147200c3eb8cc4f5',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnFileManagerDirCreate',
              ),
              'signature' => 'd7cb28dab221c9bf4e073c42018da109',
            ),
            '421107547a19f110f472b86e8972d50d' => 
            array (
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnFileManagerDirRename","priority":0,"propertyset":0}',
              'guid' => '3ede16c713c51950e9864efe3fe8fce9',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnFileManagerDirRename',
              ),
              'signature' => 'f44259565867252694ae72b9807d4fb2',
            ),
            'bdedea2658b528f437d03d0324f03bab' => 
            array (
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnFileManagerUpload","priority":0,"propertyset":0}',
              'guid' => 'c77040d6f8abd5db4d3134f7029dc3cc',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnFileManagerUpload',
              ),
              'signature' => 'f14980066afbc7107a0cc73503648cb6',
            ),
          ),
        ),
        'related_object_attributes' => 
        array (
          'PluginEvents' => 
          array (
            'preserve_keys' => true,
            'update_object' => false,
            'unique_key' => 
            array (
              0 => 'pluginid',
              1 => 'event',
            ),
          ),
        ),
        'class' => 'modPlugin',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"FileSluggy","description":"FileSluggy plugin for MODx Revolution","editor_type":0,"category":0,"cache_type":0,"plugincode":"\\/**\\r\\n * FileSluggy by Sterc\\r\\n * Sanitizes a filename on upload to be a nice and more clean filename, so it will work better with phpthumbof, pthumb and overall cleaner filenames and directories.\\r\\n * Copyright 2015 by Sterc\\r\\n * FileSluggy is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation; either version 2 of the License, or (at your option) any later\\r\\n * version.\\r\\n *\\r\\n * FileSluggy is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * formAlicious; if not, write to the Free Software Foundation, Inc., 59 Temple\\r\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @author Sterc <modx@sterc.nl>\\r\\n * @credits:\\r\\n *      - Based on the code of the sanitizefilename plugin of Benjamin Vauchel https:\\/\\/github.com\\/benjamin-vauchel\\/SanitizeFilename\\r\\n *      - The Slug() phunction of AlixAxel https:\\/\\/github.com\\/alixaxel\\/phunction\\/blob\\/master\\/phunction\\/Text.php\\r\\n * @version Version 1.3\\r\\n * @package filesluggy\\r\\n *\\/\\r\\n\\r\\n$FileSluggy = $modx->getService(\\r\\n    \'filesluggy\',\\r\\n    \'FileSluggy\',\\r\\n    $modx->getOption(\\r\\n        \'filesluggy.core_path\',\\r\\n        null,\\r\\n        $modx->getOption(\'core_path\') . \'components\\/filesluggy\\/\'\\r\\n    )\\r\\n    .\'model\\/filesluggy\\/\',\\r\\n    $scriptProperties\\r\\n);\\r\\nif (!($FileSluggy instanceof FileSluggy)) {\\r\\n    return;\\r\\n}\\r\\nswitch ($modx->event->name) {\\r\\n    case \'OnFileManagerDirCreate\':\\r\\n    case \'OnFileManagerDirRename\':\\r\\n        if ($FileSluggy->santizeAllowThisMediaSource($source->get(\'id\'))) {\\r\\n            if ($modx->getOption(\'filesluggy.sanitizeDir\')) {\\r\\n                $basePath = $source->getBasePath();\\r\\n                $dirName  = basename($directory);\\r\\n                $newDirName  = $FileSluggy->sanitizeName($dirName, true);\\r\\n                $FileSluggy->renameContainer($source, str_replace(realpath($basePath), \'\', $directory), $newDirName);\\r\\n                \\/* Invoke custom system event \'FileSluggyOnUpdateDirname\' *\\/\\r\\n                $modx->invokeEvent(\'FileSluggyOnUpdateDirname\', array(\\r\\n                    \'oldName\' => $dirName,\\r\\n                    \'newName\' => $newDirName\\r\\n                ));\\r\\n            }\\r\\n        }\\r\\n        break;\\r\\n    case \'OnFileManagerUpload\':\\r\\n        $url = parse_url($_SERVER[\'HTTP_REFERER\']);\\r\\n        $query = $url[\'query\'];\\r\\n        foreach ($files as $file) {\\r\\n            if ($FileSluggy->santizeAllowThisMediaSource($source->get(\'id\'))) {\\r\\n                if (!$source->hasErrors()) {\\r\\n                    if ($file[\'error\'] == 0) {\\r\\n                        $basePath = $source->getBasePath();\\r\\n                        $oldPath  = $directory . $file[\'name\'];\\r\\n                        if ($FileSluggy->allowType($file[\'name\'])) {\\r\\n                            $newFileName = $FileSluggy->sanitizeName($file[\'name\']);\\r\\n                            if ($FileSluggy->checkFileNameChanged()) {\\r\\n                                $newFileName = $FileSluggy->checkFileExists($basePath . $directory . $newFileName);\\r\\n                                if ($source->renameObject($oldPath, $newFileName)) {\\r\\n                                    $modx->invokeEvent(\'FileSluggyOnUpdateFilename\', array(\\r\\n                                        \'oldName\' => $file[\'name\'],\\r\\n                                        \'newName\' => $newFileName\\r\\n                                    ));\\r\\n                                    return;\\r\\n                                } else {\\r\\n                                    return;\\r\\n                                }\\r\\n                            } else {\\r\\n                                return;\\r\\n                            }\\r\\n                        } else {\\r\\n                            return;\\r\\n                        }\\r\\n                    } else {\\r\\n                        return;\\r\\n                    }\\r\\n                } else {\\r\\n                    $modx->log(\\r\\n                        modX::LOG_LEVEL_ERROR,\\r\\n                        \'[FileSluggy] There was an error during the upload process...\'\\r\\n                    );\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        break;\\r\\n}","locked":0,"properties":"a:0:{}","disabled":0,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * FileSluggy by Sterc\\r\\n * Sanitizes a filename on upload to be a nice and more clean filename, so it will work better with phpthumbof, pthumb and overall cleaner filenames and directories.\\r\\n * Copyright 2015 by Sterc\\r\\n * FileSluggy is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation; either version 2 of the License, or (at your option) any later\\r\\n * version.\\r\\n *\\r\\n * FileSluggy is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * formAlicious; if not, write to the Free Software Foundation, Inc., 59 Temple\\r\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @author Sterc <modx@sterc.nl>\\r\\n * @credits:\\r\\n *      - Based on the code of the sanitizefilename plugin of Benjamin Vauchel https:\\/\\/github.com\\/benjamin-vauchel\\/SanitizeFilename\\r\\n *      - The Slug() phunction of AlixAxel https:\\/\\/github.com\\/alixaxel\\/phunction\\/blob\\/master\\/phunction\\/Text.php\\r\\n * @version Version 1.3\\r\\n * @package filesluggy\\r\\n *\\/\\r\\n\\r\\n$FileSluggy = $modx->getService(\\r\\n    \'filesluggy\',\\r\\n    \'FileSluggy\',\\r\\n    $modx->getOption(\\r\\n        \'filesluggy.core_path\',\\r\\n        null,\\r\\n        $modx->getOption(\'core_path\') . \'components\\/filesluggy\\/\'\\r\\n    )\\r\\n    .\'model\\/filesluggy\\/\',\\r\\n    $scriptProperties\\r\\n);\\r\\nif (!($FileSluggy instanceof FileSluggy)) {\\r\\n    return;\\r\\n}\\r\\nswitch ($modx->event->name) {\\r\\n    case \'OnFileManagerDirCreate\':\\r\\n    case \'OnFileManagerDirRename\':\\r\\n        if ($FileSluggy->santizeAllowThisMediaSource($source->get(\'id\'))) {\\r\\n            if ($modx->getOption(\'filesluggy.sanitizeDir\')) {\\r\\n                $basePath = $source->getBasePath();\\r\\n                $dirName  = basename($directory);\\r\\n                $newDirName  = $FileSluggy->sanitizeName($dirName, true);\\r\\n                $FileSluggy->renameContainer($source, str_replace(realpath($basePath), \'\', $directory), $newDirName);\\r\\n                \\/* Invoke custom system event \'FileSluggyOnUpdateDirname\' *\\/\\r\\n                $modx->invokeEvent(\'FileSluggyOnUpdateDirname\', array(\\r\\n                    \'oldName\' => $dirName,\\r\\n                    \'newName\' => $newDirName\\r\\n                ));\\r\\n            }\\r\\n        }\\r\\n        break;\\r\\n    case \'OnFileManagerUpload\':\\r\\n        $url = parse_url($_SERVER[\'HTTP_REFERER\']);\\r\\n        $query = $url[\'query\'];\\r\\n        foreach ($files as $file) {\\r\\n            if ($FileSluggy->santizeAllowThisMediaSource($source->get(\'id\'))) {\\r\\n                if (!$source->hasErrors()) {\\r\\n                    if ($file[\'error\'] == 0) {\\r\\n                        $basePath = $source->getBasePath();\\r\\n                        $oldPath  = $directory . $file[\'name\'];\\r\\n                        if ($FileSluggy->allowType($file[\'name\'])) {\\r\\n                            $newFileName = $FileSluggy->sanitizeName($file[\'name\']);\\r\\n                            if ($FileSluggy->checkFileNameChanged()) {\\r\\n                                $newFileName = $FileSluggy->checkFileExists($basePath . $directory . $newFileName);\\r\\n                                if ($source->renameObject($oldPath, $newFileName)) {\\r\\n                                    $modx->invokeEvent(\'FileSluggyOnUpdateFilename\', array(\\r\\n                                        \'oldName\' => $file[\'name\'],\\r\\n                                        \'newName\' => $newFileName\\r\\n                                    ));\\r\\n                                    return;\\r\\n                                } else {\\r\\n                                    return;\\r\\n                                }\\r\\n                            } else {\\r\\n                                return;\\r\\n                            }\\r\\n                        } else {\\r\\n                            return;\\r\\n                        }\\r\\n                    } else {\\r\\n                        return;\\r\\n                    }\\r\\n                } else {\\r\\n                    $modx->log(\\r\\n                        modX::LOG_LEVEL_ERROR,\\r\\n                        \'[FileSluggy] There was an error during the upload process...\'\\r\\n                    );\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        break;\\r\\n}"}',
        'guid' => '58e2adb24d57b0224ab3025a6d688c14',
        'native_key' => NULL,
        'signature' => '360e2358f0b766f41a7292b9ac42df86',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Children' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 
      array (
        0 => 'parent',
        1 => 'category',
      ),
    ),
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Templates' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'templatename',
    ),
    'TemplateVars' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Plugins' => 
    array (
      'unique_key' => 'name',
      'preserve_keys' => false,
      'update_object' => true,
      'related_objects' => true,
      'related_object_attributes' => 
      array (
        'PluginEvents' => 
        array (
          'preserve_keys' => true,
          'update_object' => false,
          'unique_key' => 
          array (
            0 => 'pluginid',
            1 => 'event',
          ),
        ),
      ),
    ),
  ),
  'namespace' => 'filesluggy',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'php',
      'body' => '{"source":"filesluggy-1.3.1-pl\\/modCategory\\/74f8fac072ef1eb4b4a6bbba0656c390.resolve.systemevents.resolver","type":"php","name":"resolve.systemevents"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"filesluggy-1.3.1-pl\\/modCategory\\/74f8fac072ef1eb4b4a6bbba0656c390\\/1\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"filesluggy"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '992910ef3a9b90c1c438ef3dbdc87e30',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => '74f8fac072ef1eb4b4a6bbba0656c390',
  'native_key' => NULL,
  'object' => '{"id":null,"parent":0,"category":"FileSluggy","rank":0}',
);